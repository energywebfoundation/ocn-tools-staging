name: Elia Ocn Tools Staging
on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+-alpha*'
      - '[0-9]+.[0-9]+.[0-9]+-beta*'

env:
  OCN_NODE_URL: "https://test-ocn.emobilify.com"
  OCN_STAGE: "volta"

  CPO_PORT: "3000"
  CPO_ASSET_CREATION_DELAY: "10000"

  MSP_PORT: "3001"
  MSP_ASSET_CREATION_DELAY: "10000"
  MSP_ASSET_COUNT: "200"

  NATS_PROTOCOL_PORT: "4222"

jobs:

  cancel-previous:
    name: 'Cancel Previous Runs'
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
      - uses: styfle/cancel-workflow-action@0.5.0
        with:
          #workflow_id: 479426
          access_token: ${{ github.token }}

  build:

    runs-on: ubuntu-latest
    needs: cancel-previous
    steps:

    - name: Checkout
      uses: actions/checkout@v2
    
    - name: Get the tag version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Build & push docker images
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ steps.get_version.outputs.VERSION }}
      run: |
        docker build -f Dockerfile -t $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG .
        docker push $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG
    
    - name: Logout of Amazon ECR
      if: always()
      run: docker logout ${{ steps.login-ecr.outputs.registry }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Get the tag version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}
        
    # Alternatively you could create SSM document via terraform and just trigger it passing various of parameters. Example below.
    # - name: Trigger SSM
    #   id: SSM_trigger
    #   run: aws ssm send-command --instance-ids ${{ secrets.INSTANCE_ID }} --document-name "Elia_Test_OCN_Tools" --comment "IP config" --parameters "content=Kamil"

    - name: Deplyoment Via SSM
      uses: peterkimzz/aws-ssm-send-command@master
      id: ssm
      env:
        IMAGE_TAG: ${{ steps.get_version.outputs.VERSION }}
      with:
        aws-region: eu-central-1
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        instance-ids: ${{ secrets.INSTANCE_ID }}

        working-directory: /home/ubuntu/docker-stack/${{ github.event.repository.name }}
        command: >-
          git stash;
          sudo git pull;
          touch .env;
          touch ./devops/nginx/origin.crt;
          touch ./devops/nginx/origin.key;
          sudo chown -R ${{ secrets.USER }}:${{ secrets.USER }} .;
          echo AWS_DEFAULT_REGION=eu-central-1 > .env;
          echo IMAGE_TAG=${{ env.IMAGE_TAG }}>> .env;
          echo AWS_ACCOUNT_ID_STAGING=${{ secrets.AWS_ACCOUNT_ID_STAGING }} >> .env;
          echo AWS_REPOSITORY_URL=${{ secrets.AWS_REPOSITORY_URL }} >> .env;

          echo OCN_IDENTITY=${{ secrets.CPO_PRIVATE_KEY }} > .env_cpo;
          echo OCN_TOKEN_A=${{ secrets.CPO_TOKEN_A }} >> .env_cpo;
          echo OCN_NODE_URL=${{ env.OCN_NODE_URL }} >> .env_cpo;
          echo OCN_STAGE=${{ env.OCN_STAGE }} >> .env_cpo;
          echo CPO_PORT=${{ env.CPO_PORT }} >> .env_cpo;
          echo CPO_PUBLIC_IP=${{ secrets.CPO_PUBLIC_IP }} >> .env_cpo;
          echo CPO_PARTY_ID=${{ secrets.CPO_PARTY_ID }} >> .env_cpo;
          echo CPO_COUNTRY_CODE=${{ secrets.CPO_COUNTRY_CODE }} >> .env_cpo;
          echo CPO_ASSET_CREATION_DELAY=${{ env.CPO_ASSET_CREATION_DELAY }} >> .env_cpo;
          echo PREQUALIFICATION_ISSUER_ROLE=${{ secrets.PREQUALIFICATION_ISSUER_ROLE }} >> .env_cpo;
          echo PREQUALIFICATION_ROLE=${{ secrets.PREQUALIFICATION_ROLE }} >> .env_cpo;
          echo EWC_RPC_URL=${{ secrets.EWC_RPC_URL }} >> .env_cpo;
          echo USER_CACHE_SERVER_URL=${{ secrets.USER_CACHE_SERVER_URL }} >> .env_cpo;
          echo ASSET_CACHE_SERVER_URL=${{ secrets.ASSET_CACHE_SERVER_URL }} >> .env_cpo;
          echo NATS_SERVER_URL=${{ secrets.NATS_SERVER_URL }} >> .env_cpo;
          echo NATS_PROTOCOL_PORT=${{ env.NATS_PROTOCOL_PORT }} >> .env_cpo;
          echo EV_REGISTRY_ADDRESS=${{ secrets.EV_REGISTRY_ADDRESS }} >> .env_cpo;
          echo EV_REGISTRY_PROVIDER=${{ secrets.EV_REGISTRY_PROVIDER }} >> .env_cpo;


          echo OCN_IDENTITY=${{ secrets.MSP_PRIVATE_KEY }} > .env_msp;
          echo OCN_TOKEN_A=${{ secrets.MSP_TOKEN_A }} >> .env_msp;
          echo OCN_NODE_URL=${{ env.OCN_NODE_URL }} >> .env_msp;
          echo OCN_STAGE=${{ env.OCN_STAGE }} >> .env_msp;
          echo MSP_PORT=${{ env.MSP_PORT }} >> .env_msp;
          echo MSP_PUBLIC_IP=${{ secrets.MSP_PUBLIC_IP }} >> .env_msp;
          echo MSP_PARTY_ID=${{ secrets.MSP_PARTY_ID }} >> .env_msp;
          echo MSP_COUNTRY_CODE=${{ secrets.MSP_COUNTRY_CODE }} >> .env_msp;
          echo MSP_ASSET_CREATION_DELAY=${{ env.MSP_ASSET_CREATION_DELAY }} >> .env_msp;
          echo PREQUALIFICATION_ISSUER_ROLE=${{ secrets.PREQUALIFICATION_ISSUER_ROLE }} >> .env_msp;
          echo PREQUALIFICATION_ROLE=${{ secrets.PREQUALIFICATION_ROLE }} >> .env_msp;?
          
          echo EWC_RPC_URL=${{ secrets.EWC_RPC_URL }} >> .env_msp;
          echo USER_CACHE_SERVER_URL=${{ secrets.USER_CACHE_SERVER_URL }} >> .env_msp;
          echo ASSET_CACHE_SERVER_URL=${{ secrets.ASSET_CACHE_SERVER_URL }} >> .env_msp;
          echo NATS_SERVER_URL=${{ secrets.NATS_SERVER_URL }} >> .env_msp;
          echo NATS_PROTOCOL_PORT=${{ env.NATS_PROTOCOL_PORT }} >> .env_msp;
          echo EV_REGISTRY_ADDRESS=${{ secrets.EV_REGISTRY_ADDRESS }} >> .env_msp;
          echo EV_REGISTRY_PROVIDER=${{ secrets.EV_REGISTRY_PROVIDER }} >> .env_msp;

          echo ${{ secrets.NGINX_CERTIFICATE }} | base64 -d > ./devops/nginx/origin.crt;
          echo ${{ secrets.NGINX_KEY }} | base64 -d > ./devops/nginx/origin.key;
          aws ecr get-login --no-include-email --region eu-central-1 | bash;
          docker pull ${{ secrets.AWS_REPOSITORY_URL }}:${{ env.IMAGE_TAG }};
          docker logout ${{ secrets.AWS_REPOSITORY_URL }};
          docker-compose up -d
        comment: "Deplyoment of new version"

    # Catch SSM outputs
    - name: Get the outputs
      run: echo "The Command id is ${{ steps.ssm.outputs.command-id }}"
