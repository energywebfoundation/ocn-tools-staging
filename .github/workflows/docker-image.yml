name: Docker Image CI

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+-alpha*'
      - '[0-9]+.[0-9]+.[0-9]+-beta*'
    
env:
  ECR_REPOSITORY: ew-elia
  AWS_REPOSITORY_URL: "${{ secrets.AWS_ACCOUNT_ID_STAGING }}.dkr.ecr.eu-central-1.amazonaws.com/ew-elia"
  
  #For future changes
  RPC_URL: "https://volta-internal-archive.energyweb.org"
  MSP_DNS: "https://dev.ev-dashboard-msp.energyweb.org"
  CPO_DNS: "https://dev.ev-dashboard-cpo.energyweb.org"


jobs:

  cancel-previous:
    name: 'Cancel Previous Runs'
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
      - uses: styfle/cancel-workflow-action@0.5.0
        with:
          #workflow_id: 479426
          access_token: ${{ github.token }}

  build:

    runs-on: ubuntu-latest
    needs: cancel-previous
    steps:

    - name: Checkout
      uses: actions/checkout@v2
    
    - name: Get the tag version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Build & push docker images
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ steps.get_version.outputs.VERSION }}
      run: |
        docker build -f Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    
    - name: Logout of Amazon ECR
      if: always()
      run: docker logout ${{ steps.login-ecr.outputs.registry }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Get the tag version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}
        
    # Alternatively you could create SSM document via terraform and just trigger it passing various of parameters. Example below.
    # - name: Trigger SSM
    #   id: SSM_trigger
    #   run: aws ssm send-command --instance-ids ${{ secrets.INSTANCE_ID }} --document-name "Elia_Test_OCN_Tools" --comment "IP config" --parameters "content=Kamil"

    - name: Deplyoment Via SSM
      uses: peterkimzz/aws-ssm-send-command@master
      id: ssm
      env:
        IMAGE_TAG: ${{ steps.get_version.outputs.VERSION }}
      with:
        aws-region: eu-central-1
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        instance-ids: ${{ secrets.INSTANCE_ID }}

        working-directory: /home/ubuntu/docker-stack/${{ github.event.repository.name }}
        command: >-
          sudo git pull;
          touch .env;
          touch ./devops/nginx/origin.crt;
          touch ./devops/nginx/origin.key;
          sudo chown -R ${{ secrets.USER }}:${{ secrets.USER }} .;
          echo AWS_DEFAULT_REGION=eu-central-1 > .env;
          echo IMAGE_TAG=${{ env.IMAGE_TAG }}>> .env;
          echo AWS_ACCOUNT_ID_STAGING=${{ secrets.AWS_ACCOUNT_ID_STAGING }} >> .env;
          echo CPO_PRIVATE_KEY=${{ secrets.CPO_PRIVATE_KEY }} >> .env;
          echo CPO_TOKEN_A=${{ secrets.CPO_TOKEN_A }} >> .env;
          echo AWS_REPOSITORY_URL=${{ env.AWS_REPOSITORY_URL }} >> .env;
          echo ${{ secrets.NGINX_CERTIFICATE }} | base64 -d > ./devops/nginx/origin.crt;
          echo ${{ secrets.NGINX_KEY }} | base64 -d > ./devops/nginx/origin.key;
          aws ecr get-login --no-include-email --region eu-central-1 | bash;
          docker pull ${{ env.AWS_REPOSITORY_URL }}:${{ env.IMAGE_TAG }};
          docker logout ${{ env.AWS_REPOSITORY_URL }};
        comment: "First try"

    # Catch SSM outputs
    - name: Get the outputs
      run: echo "The Command id is ${{ steps.ssm.outputs.command-id }}"
